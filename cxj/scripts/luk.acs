// Encapsulates the low-level details needed for interacting with luk.
//
// A script interacts with luk by sending luk-specific queries to the output
// stream. The structure of a luk query is given below. The query cargo is
// also known as a command. Note that command arguments don't have to be
// delimited by appropriate delimiter characters if the argument is a single
// value without any whitespace. Otherwise, the delimiting characters must be
// used because whitespace indicates argument separation. Refer to the source
// code of luk for more information.
//
// Query: 
//   <query_delim> 
//     <identifier>
//     <query_number>
//     <query_cargo>
//   <query_delim>
//
// Query cargo: 
//   <action> [ [{]arg1[}] [ ... ] ]
//
// Example: \b luk 12 SAY {Positron is cool} \b
//
// Author: 
// Positron
//
// License:
// Free for any purpose. I'm not liable for any damages.

#library "luksys"
#include "zcommon.acs"

#import "constants.acs"

// Query delimiter.
str LUK_QEURY_DELIM = "\b";
// Query identifier.
str LUK_QUERY_ID = "luk";
// Anything between the left and right argument delimiters will be 
// considered as a single value.
str LUK_ARG_DELIM_LEFT = "{";
str LUK_ARG_DELIM_RIGHT = "}";
// Timeout in seconds for luk replies.
#define LUK_QUERY_TIMEOUT 3
// RETRIEVE query types.
#libdefine LUK_RETQUERY_INT 0
#libdefine LUK_RETQUERY_STR 1
#libdefine LUK_RETQUERY_DATE 2
// Query execution results from luk.
#define LUK_RESPONSE_OK 0
#define LUK_RESPONSE_FAILED 1
// Query execution results we will tell the user.
#libdefine LUK_RESULT_OK 0
#libdefine LUK_RESULT_FAILED 1
#libdefine LUK_RESULT_TIMEOUT 2
#libdefine LUK_RESULT_UNKNOWN 3
// Because we will be encoding each character in three digits of
// an integer value and the ASCII value of some characters is only
// two digits, we will add a padding to the ASCII value of each
// character we send and receieve. This padding will make sure that
// even those characters with two digit ASCII values will have a
// value of three digits.  
#define LUK_ASCII_PADDING 100
// Maximum size of a string that we will recieve.
#libdefine LUK_MAX_STR_VALUE_SIZE 100
// Maximum characters per string segment transfer.
#define LUK_MAX_STR_SEGMENT_CHARS 3
// To help with readability when calling the retrieval scripts, we will
// create a descriptive constant that contains the script number.
#libdefine LUK_RETSCRIPT 970
#libdefine LUK_LRETSCRIPT 975

// We can only store a maximum of 3 characters in a 32-bit integer
// value if each character is encoded as three.
int _luk_segment_r[ LUK_MAX_STR_SEGMENT_CHARS ];

// Array variable to store the complete string value.
int _luk_str_value[ LUK_MAX_STR_VALUE_SIZE ];
// Variable to store the luk response data.
int _luk_data = VALUE_NONE;
// Variables to hold unpacked date segments.
int _luk_dyear = VALUE_NONE;
int _luk_dmonth = VALUE_NONE;
int _luk_dday = VALUE_NONE;

// This variable will store the unique query ID that we will use
// to check whether luk has responded.
int _luk_query_id = 0;

// This variable will contain the result of a query.
int _luk_query_result = LUK_RESULT_UNKNOWN;

// This script retrieves a value from luk.
script 970 ( int type, int keyName ) {
   switch( type ) {
      case LUK_RETQUERY_INT:
         acs_ExecuteWait( 972, 0, LukRetrieve( keyName ) );
         break;

      case LUK_RETQUERY_STR:
         acs_ExecuteWait( 973, 0, LukInitStringTransm( keyName ) );
         break;

      case LUK_RETQUERY_DATE: 
         acs_ExecuteWait( 974, 0, LukRetrieveDate( keyName ) );
         break;
   }
}

// This script waits for a luk query to be answered and processes 
// the result.
script 971 ( int queryId ) {
   int tics_left = TICS_IN_SECOND * LUK_QUERY_TIMEOUT;
   bool is_answered = false;

   while ( tics_left > 0 ) {
      // A luk query is answered when luk sets the appropriate console
      // variable to the query ID, indicating it successfully received the
      // query and processed it.
      if ( getCvar( "luk_qid" ) == queryId ) {
         is_answered = true;
         break;
      }

      tics_left -= 1;
      delay( 1 );
   }

   // Process the query response.
   int result;

   if ( is_answered ) {
      // If the query was answered successfully, see what information
      // luk said about the query.
      switch ( getCVar( "luk_qr" ) ) {
         // OK, no errors, result:
         case LUK_RESPONSE_OK:
            // Save the data of the query response if the response is OK.
            _luk_data = getCVar( "luk_d" );
            result = LUK_RESULT_OK;
            break;

         // The command failed to successfully execute.
         case LUK_RESPONSE_FAILED:
            result = LUK_RESULT_FAILED;
            break;

         default:
            result = LUK_RESULT_UNKNOWN;
            break;
      }
   }
   // Query timed out.
   else {
      result = LUK_RESULT_TIMEOUT;
   }

   // Save the result to let the user know the result of the query.
   _luk_query_result = result;
}

// The different scripts to process initiated retrieval query.

// Integer retrieval script.
script 972 ( int initialQueryId ) {
   // Wait for the query to be answered.
   acs_ExecuteWait( 971, 0, initialQueryId );
}

// String retrieval script.
script 973 ( int initialQueryId ) {
   int query_id = initialQueryId;
   acs_ExecuteWait( 971, 0, query_id );

   // Abort if the query timed out or there's no record.
   int result = LukGetQueryResult();
   if ( result == LUK_RESULT_TIMEOUT || result == LUK_RESULT_FAILED ) {
      terminate;
   }

   int queries_needed = LukGetData();
   int offset = 0;
   int ascii_package;

   while ( queries_needed > 0 ) {
      query_id = LukRetrieveStringSegment();
      acs_ExecuteWait( 971, 0, query_id );
      queries_needed -= 1;

      if ( LukGetQueryResult() == LUK_RESULT_OK ) {
         offset += LukUnpackAscii( LukGetData(), offset );
      }
      // Break out if we cannot retrieve a segment.
      else {
         terminate;
      }

      delay( 1 );
   }

   // Terminate the string with the NULL character.
   _luk_str_value[ offset ] = '\0';
}

// Date retrieval script.
script 974 ( int initialQueryId ) {
   acs_ExecuteWait( 971, 0, initialQueryId);
   if ( LukGetQueryResult() == LUK_RESULT_OK ) {
      int packed_data = LukGetData();

      // Packed date is of this format: YYYYMMDD
      _luk_dday = packed_data % 100;
      packed_data /= 100;
      _luk_dmonth = packed_data % 100;
      packed_data /= 100;
      _luk_dyear = packed_data;
   }
}

// List version of the above script, allowing the key to be concatenated
// with a number to form a new key that represents an item in a list. We
// have to make this nearly duplicate script because of the inflexibility
// of ACS. Things would have been so much simpler if ACS supported
// dynamic creation of strings. This applies to the functions that send
// the queries below, too.
script 975 ( int type, int keyName, int keyNum ) {
   switch( type ) {
      case LUK_RETQUERY_INT:
         acs_ExecuteWait( 972, 0, LukRetrieveL( keyName, keyNum ) );
         break;

      case LUK_RETQUERY_STR:
         acs_ExecuteWait( 973, 0, LukInitStringTransmL( keyName, keyNum ) );
         break;

      // We don't have any functions and scripts to handle list values
      // for dates because we don't need any at the moment.
   }
}

function int LukUnpackAscii( int asciiPackage, int offset ) {
   int sep = 1000;
   int char = 0;

   // First, decode the luk-encoded ASCII package into real ASCII.
   while ( asciiPackage > 0 ) {
      _luk_segment_r[ char ] = ( asciiPackage % sep ) - LUK_ASCII_PADDING;
      asciiPackage /= sep;
      char += 1;
   }

   int chars_read = char;

   // At this stage, we have the data loaded into ACS, but it's
   // reversed, so we'll have to reverse the characters to make
   // it readable again.
   int nameCharacter = 0;
   while ( char > 0 ) {
      _luk_str_value[ offset + nameCharacter ] = _luk_segment_r[ char - 1 ];
      char -= 1;
      nameCharacter += 1;
   }

   return chars_read;
}

function bool LukIsEnabled( void ) {
   if ( getCVar( "luk_system" ) ) {
      return true;
   }

   return false;
}

function int LukGetQueryResult( void ) {
   return _luk_query_result;
}

function int LukGetData( void ) {
   return _luk_data;
}

// Functions to retrieve the date segments.
function int LukGetDateYear( void ) {
   return _luk_dyear;
}

function int LukGetDateMonth( void ) {
   return _luk_dmonth;
}

function int LukGetDateDay( void ) {
   return _luk_dday;
}

// The query ID is generated by incrementing the last given query ID.
// luk will compare the current query ID with the last query ID 
// it processed. If the current query ID is the same as or below the
// last query ID, it will ignore the current query.
function int LukGenerateQueryId( void ) {
   _luk_query_id += 1;
   return _luk_query_id;
}

// Query functions:
//
// These functions send retrieval queries to luk and return
// the queries ID for further handling. 

// This function is used for simple, numeric value retrievals.
function int LukRetrieve( str key ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " RETRIEVE ", 
      s : key,
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukRetrieveDate( str key ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " RETRIEVE_DATE ", s : key,
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukInitStringTransm( str key ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " RETRIEVE_STRING_INITIATE ",
      s : key,
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukRetrieveStringSegment( void ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " RETRIEVE_STRING_SEGMENT ",
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukStoreInt( str key, int value ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " STORE ", s : key, s : " ", i : value,
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukStoreStr( str key, str value ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " STORE ", s : key, s : " {", s : value, s : "}",
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukStoreName( str key, int playerNum ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " STORE ", s : key, s : " {", n : playerNum + 1, s : "}",
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukStoreDate( str key ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " STORE_DATE ", s : key,
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

// These functions are the same as their above counterparts, but
// allow the query key to be concatenated with a number. These
// functions are useful for making a list of values by using
// a single key name.
function int LukStoreNameL( str key, int keyNum, int playerNum ) {
   int query_id = LukGenerateQueryId();

   log(
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " STORE ", s : key, i : keyNum,
      s : " {", n : playerNum + 1, s : "}",
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukStoreIntL( str key, int keyNum, int value ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " STORE ", s : key, i : keyNum,
      s : " ", i : value,
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukRetrieveL( str key, int keyNum ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " RETRIEVE ", 
      s : key, i : keyNum, 
      s : LUK_QEURY_DELIM
   );

   return query_id;
}

function int LukInitStringTransmL( str key, int keyNum ) {
   int query_id = LukGenerateQueryId();

   log( 
      s : LUK_QEURY_DELIM,
      s : LUK_QUERY_ID,
      s : " ", i : query_id,
      s : " RETRIEVE_STRING_INITIATE ",
      s : key, i : keyNum, 
      s : LUK_QEURY_DELIM
   );

   return query_id;
}